from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from bot_tg.loader import dp, bot
from buttons.inlines import connect
from buttons.reply import number
from states import UserStates
from calendar_api.individual_calendar import Calendar


@dp.message_handler(state=UserStates.GetNumber)
async def get_name_number(message: Message, state: FSMContext):
    text = message.text
    await state.update_data(text=text)
    await bot.send_message(message.chat.id, text="–ò –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
                                                 "—á—Ç–æ–±—ã –ø—Å–∏—Ö–æ–ª–æ–≥ —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ "
                                                 "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                           reply_markup=number
                           )

    await UserStates.ReqestCont.set()


@dp.message_handler(content_types=['contact'], state=UserStates.ReqestCont)
async def my_number(message: Message, state: FSMContext):

    async with state.proxy() as data:
        event = data["event"]
        cons = data["cons"]
        try:
            subgroup = data["subgroup"]
        except:
            subgroup = None

    if cons == "ind_cons":
        cons = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    elif cons == "mini_group":
        cons = "–ú–∏–Ω–∏-–≥—Ä—É–ø–ø–∞"
    elif cons == "them_group":
        if subgroup == "about_relat":
            subgroup = "–ü—Ä–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
        elif subgroup == "self_realization":
            subgroup = "–°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"
        elif subgroup == "finance":
            subgroup = "–§–∏–Ω–∞–Ω—Å—ã"
        cons = f"–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã {subgroup}"

    async with state.proxy() as data:
        text = data.get("text")
    event_data = {
        "summary": cons,
        "subgroup": subgroup,
        "name": text,
        "phone_number": message.contact["phone_number"],
        "start": f"{event['date']['year']}-{event['date']['month']}-{event['date']['day']}T{event['startTime']}+03:00",
        "end": f"{event['date']['year']}-{event['date']['month']}-{event['date']['day']}T{event['endTime']}+03:00",
    }
    event_id = Calendar.create_event(event_data)
    event_data["event_id"] = event_id
    text = f"""
–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç:

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event_data['summary']} üòä
<b>–î–∞—Ç–∞:</b> {event['date']['day']}.{event['date']['month']}.{event['date']['year']} üìÖ
<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏:</b> {event['startTime'][:-3]} ‚è∞
<b>–ö–æ–Ω–µ—Ü –≤—Å—Ç—Ä–µ—á–∏:</b> {event['endTime'][:-3]} üïí
<b>–í–∞—à–µ –∏–º—è:</b> {text}
<b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {message.contact["phone_number"]}
    """
    await bot.send_message(message.chat.id, text=text, parse_mode=types.ParseMode.HTML, reply_markup=connect)
    await state.finish()
