import asyncio

from aiogram import types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton

from bot_tg.loader import dp, bot
from buttons.inlines import this_weeks_button_markup, cd, subgroup_them, enroll, next_, enroll_them_mini
from utils import convert_date
from states import UserStates

from aiogram.dispatcher import FSMContext


@dp.callback_query_handler(cd.filter(action="ind_cons"), state=UserStates.ChooseCat)
async def ind_cons_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è-—ç—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º (–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º), –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è '
        '—Ç–µ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ —Ç–µ–º, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å.\n\n'
        '–¢–∞–∫–∂–µ –∑–∞–¥–∞—à—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ —É–∑–Ω–∞–µ—à—å —Å–µ–±—è –ª—É—á—à–µ.\n\n'
        '‚ÑπÔ∏è–†–∞–±–æ—Ç–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–∏—á–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.\n\n'
        '‚ÑπÔ∏è–ö–æ—Ä–æ—Ç–∫–∏–π —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –æ—Ç 4 –¥–æ 8 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n'
        '–ë–µ—Ä–µ–∂–Ω–æ. –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ.\n\n'
        '–ü—Ä–∏—Ö–æ–¥–∏ , —è —Ä–∞–¥–∞ —Ç–µ–±–µ ü§ç',
        reply_markup=enroll
    )

    async with state.proxy() as data:
        data["cons"] = cd.parse(callback_query.data)["action"]

    await UserStates.Enroll.set()


@dp.callback_query_handler(cd.filter(action='mini_group'), state=[UserStates.ChooseCat, UserStates.Admin])
async def mini_cons_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    await bot.send_message(
        callback_query.from_user.id,
        "–ú–∏–Ω–∏-–≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.\n\n"
        "–í –≥—Ä—É–ø–ø–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —É—á–∞—Å—Ç–∏–µ –¥–æ 4 —á–µ–ª–æ–≤–µ–∫.\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–ª–∏–∂–∞–π—à–µ–π –≥—Ä—É–ø–ø–µ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–ª—è —Ç–µ–±—è —Ç–µ–º–µ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å üîΩüîΩüîΩ",
        reply_markup=enroll_them_mini
    )

    async with state.proxy() as data:
        data["cons"] = cd.parse(callback_query.data)["action"]

    await UserStates.Enroll.set()


@dp.callback_query_handler(cd.filter(action='them_group'), state=[UserStates.ChooseCat, UserStates.Admin])
async def them_cons_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "–ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–µ–º–∏–Ω–∞—Ä—ã –∏ –º–∞—Å—Ç–µ—Ä -–∫–ª–∞—Å—Å—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º, –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö"
        " –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
        "–í—ã–±–∏—Ä–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–º—É , –ø—Ä–∏—Ö–æ–¥–∏ –∏ —Ä–∞—Å—à–∏—Ä—è–π —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ , –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ —Ñ–æ—Ä–º–∏—Ä—É–π —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π "
        "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫—Ä—É–≥ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ üôå",
        reply_markup=subgroup_them
    )

    async with state.proxy() as data:
        data["cons"] = cd.parse(callback_query.data)["action"]
    await UserStates.Subgroup.set()


@dp.callback_query_handler(cd.filter(action='about_relat'), state=UserStates.Subgroup)
async def subgroup_relat_them_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        '–ö—É—Ä—Å ¬´–ü—Ä–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è¬ª\n\n'
        '–¢–µ–æ—Ä–∏—è , –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n'
        '- –õ–∏—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã\n'
        '- –¢–∏–ø—ã –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ\n'
        '- –°–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å\n'
        '- –≠—Ç–∞–ø—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π \n'
        '- –ë–ª–∏—â–æ—Å—Ç—å –¥—É—Ö–æ–≤–Ω–∞—è –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è\n'
        '–ú—É–∂—Å–∫–æ–π –∏ –∂–µ–Ω—Å–∫–∏–π –≤–∑–≥–ª—è–¥ üëÄ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–≤–Ω–µ—Å–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ –≤ –∂–∏–∑–Ω—å. Online',
        reply_markup=enroll_them_mini
    )
    async with state.proxy() as data:
        data["subgroup"] = cd.parse(callback_query.data)["action"]

    await UserStates.ChooseDay.set()


@dp.callback_query_handler(cd.filter(action='self_realization'), state=UserStates.Subgroup)
async def subgroup_realization_them_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        '–°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è\n\n'
        '–ö—É—Ä—Å ¬´–í —Ä–∏—Ç–º–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –¥—É—à–∏¬ª. –†–∞–±–æ—Ç–∞ –≤ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. '
        '–ë—É–¥–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é ¬´–º–∞–≥–∏—é¬ª –∂–∏–∑–Ω–∏, —Ç–∞–ª–∞–Ω—Ç–æ–≤, –ø—Ä–∏–∑–≤–∞–Ω–∏—è –∏ '
        '—Å–∫–æ—Ä–æ—Å—Ç–µ–π. –í—Å—Ç—Ä–µ—á–∏ –∫–∞–∂–¥—ã–µ 3 –Ω–µ–¥–µ–ª–∏. Online',
        reply_markup=enroll_them_mini
    )
    async with state.proxy() as data:
        data["subgroup"] = cd.parse(callback_query.data)["action"]

    await UserStates.ChooseDay.set()


@dp.callback_query_handler(cd.filter(action='finance'), state=UserStates.Subgroup)
async def subgroup_realization_them_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        '–ö—É—Ä—Å Pro —Ñ–∏–Ω–∞–Ω—Å—ã .\n\n'
        '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Ä–∞—Å–∫–∞—á–∞—Ç—å —Å–≤–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–µ. –í—Å—Ç—Ä–µ—á–∏ 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü, –∑–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞ '
        '—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. 6 –≤—Å—Ç—Ä–µ—á = 6 –º–µ—Å—è—Ü–µ–≤. Online.',
        reply_markup=enroll_them_mini
    )

    async with state.proxy() as data:
        data["subgroup"] = cd.parse(callback_query.data)["action"]

    await UserStates.ChooseDay.set()


@dp.callback_query_handler(cd.filter(action="enroll"), state=UserStates.Enroll)
async def enroll_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        '–ó–∞–ø–∏—Å—å –≤–µ–¥–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é. –í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è üïô',
        reply_markup=this_weeks_button_markup
    )

    await UserStates.ChooseDay.set()


@dp.callback_query_handler(lambda c: c._user_data.startswith('date_'), state=UserStates.ChooseDay)
async def date_callback_function(callback_query: types.CallbackQuery, state: FSMContext):
    selected_date = callback_query.data.split('_')[1]
    date = convert_date(selected_date) + "+03:00"

    async with state.proxy() as data:
        cons = data["cons"]

    events = IndividualCalendar.check_calendar(date)

    async with state.proxy() as data:
        data["events"] = events

    if len(events) == 0:
        message = await bot.send_message(
            callback_query.from_user.id, text="–°–æ—Ä–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π"
        )
        await asyncio.sleep(2.5)
        await bot.delete_message(callback_query.message.chat.id, message.message_id)
        return
    text = f"""
–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ç–∞–∫–∏–µ —Å–ª–æ—Ç—ã:

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {events[0]['summary']} üòä
<b>–î–∞—Ç–∞:</b> {events[0]['date']['day']}.{events[0]['date']['month']}.{events[0]['date']['year']} üìÖ
<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏:</b> {events[0]['startTime'][:-3]} ‚è∞
<b>–ö–æ–Ω–µ—Ü –≤—Å—Ç—Ä–µ—á–∏:</b> {events[0]['endTime'][:-3]} üïí
    """
    await bot.send_message(callback_query.from_user.id,
                           text=text,
                           reply_markup=next_, parse_mode=types.ParseMode.HTML)

    await UserStates.ChooseTime.set()


@dp.callback_query_handler(cd.filter(action='enroll_them_mini'), state=UserStates.Enroll)
async def date_them_mini_callback_function(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        cons = data["cons"]
        try:
            subgroup = data["subgroup"]
        except:
            subgroup = None

    if cons == "mini_group":
        events = GroupCalendar.check_calendar()
    elif cons == "them_group":
        if subgroup == "about_relat":
            subgroup = "–ü—Ä–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
        elif subgroup == "self_realization":
            subgroup = "–°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"
        elif subgroup == "finance":
            subgroup = "–§–∏–Ω–∞–Ω—Å—ã"
        events = ThematicCalendar.check_calendar(subgroup)

    async with state.proxy() as data:
        data["events"] = events

    if len(events) == 0:
        message = await bot.send_message(
            callback_query.from_user.id, text="–°–æ—Ä–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π"
        )
        return
    text = f"""
–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ç–∞–∫–∏–µ —Å–ª–æ—Ç—ã:

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {events[0]['summary']} üòä
<b>–î–∞—Ç–∞:</b> {events[0]['date']['day']}.{events[0]['date']['month']}.{events[0]['date']['year']} üìÖ
<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏:</b> {events[0]['startTime'][:-3]} ‚è∞
<b>–ö–æ–Ω–µ—Ü –≤—Å—Ç—Ä–µ—á–∏:</b> {events[0]['endTime'][:-3]} üïí
    """
    await bot.send_message(callback_query.from_user.id,
                           text=text,
                           reply_markup=next_, parse_mode=types.ParseMode.HTML)

    await UserStates.ChooseTime.set()


@dp.callback_query_handler(lambda c: c._user_data.startswith('next_'), state=UserStates.ChooseTime)
async def next_callback(callback_query: types.CallbackQuery, state: FSMContext):
    message_number = int(callback_query.data.split('_')[1])

    async with state.proxy() as data:
        events = data["events"]

    if callback_query.data.split('_')[2] == "signup":
        message = await bot.send_message(callback_query.from_user.id, text="–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–ø—Ä–∞–≤—Ç–µ "
                                                                 "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–º—è –§–∞–º–∏–ª–∏—è")

        event = events[int(callback_query.data.split('_')[1])]
        print(events[int(callback_query.data.split('_')[1])])

        async with state.proxy() as data:
            data["event"] = event

        await UserStates.GetNumber.set()
        return
    elif callback_query.data.split('_')[2] == "back":
        next_message_number = message_number - 1
    else:
        next_message_number = message_number + 1

    if len(events) > next_message_number >= 0:
        next_ = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton("‚óÄÔ∏è", callback_data=f'next_{next_message_number}_back'),
                InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f'next_{next_message_number}_next')
             ],
            [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f'next_{next_message_number}_signup')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')],
        ])
        text = f"""
        –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ç–∞–∫–∏–µ —Å–ª–æ—Ç—ã:

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {events[next_message_number]['summary']} üòä
<b>–î–∞—Ç–∞:</b> {events[next_message_number]['date']['day']}.{events[next_message_number]['date']['month']}.{events[next_message_number]['date']['year']} üìÖ
<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏:</b> {events[next_message_number]['startTime'][:-3]} ‚è∞
<b>–ö–æ–Ω–µ—Ü –≤—Å—Ç—Ä–µ—á–∏:</b> {events[next_message_number]['endTime'][:-3]}
        """
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=text,
            reply_markup=next_,
            parse_mode=ParseMode.HTML,
        )
    else:
        await bot.answer_callback_query(callback_query.id, "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–ø–∏—Å—å.")


@dp.callback_query_handler(lambda c: c._user_data.startswith('back'), state="*")
async def back_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    async with state.proxy() as data:
        cons = data["cons"]
    print(await state.get_state())
    if cons == "them_group":
        if await state.get_state() == "UserStates:Subgroup":
            await UserStates.ChooseCat.set()
        elif await state.get_state() == "UserStates:Enroll":
            await UserStates.ChooseCat.set()
        elif await state.get_state() == "UserStates:ChooseDay":
            await UserStates.Subgroup.set()
        elif await state.get_state() == "UserStates:ChooseTime":
            await UserStates.Enroll.set()
    elif cons == "mini_group":
        if await state.get_state() == "UserStates:Enroll":
            await UserStates.ChooseCat.set()
        elif await state.get_state() == "UserStates:ChooseTime":
            await UserStates.Enroll.set()
    else:
        if await state.get_state() == "UserStates:ChooseDay":
            await UserStates.Enroll.set()
        else:
            await UserStates.previous()
    print(await state.get_state())
